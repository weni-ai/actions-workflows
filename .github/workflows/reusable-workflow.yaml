name: Build and Deploy

on:
  workflow_call:
    inputs:
      docker_arch:
        required: false
        type: string
        default: |
          - arch: arm64
            image: ubuntu-24.04-arm
          - arch: amd64
            image: ubuntu-latest
      image_repository:
        required: true
        type: string
      image_tag_prefix:
        required: false
        type: string
        default: ""
      #image_registry_url:
      #  required: false
      #  type: string
      #  default: ""
      image_tag_prefix_onlatest:
        required: false
        type: string
        default: "false"
      image_latest:
        required: false
        type: string
        default: "false"
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      target_application:
        required: true
        type: string
      target_repository:
        required: true
        type: string
      target_repository_branch:
        required: false
        type: string
        default: main
      target_patch_file:
        required: true
        type: string
    secrets:
      REGISTRY_ECR:
        required: false
      REGISTRY_USERNAME:
        required: true
      REGISTRY_TOKEN:
        required: true
      DEVOPS_GITHUB_PERMANENT_TOKEN:
        required: true

env:
  DOCKER_IMAGE: ${{ secrets.REGISTRY_ECR }}/${{ inputs.image_repository }}

jobs:
  build_and_push:
    strategy:
      fail-fast: false
      matrix:
        # ${{ toJSON(docker_arch) }}
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.runner }}
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Set variables
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" | tee -a "${GITHUB_ENV}"

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: type=ref,event=tag
          flavor: |
            latest=${{ inputs.image_latest }}
            prefix=${{ inputs.image_tag_prefix }},onlatest=${{ inputs.image_tag_prefix_onlatest }}

      - name: Login to Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ secrets.REGISTRY_ECR }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ${{ inputs.dockerfile }}
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          #push: true
          #tags: ${{ steps.meta.outputs.tags }}
          platforms: ${{ steps.matrix.platform }}
          outputs: type=image,name=${{ env.DOCKER_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          #outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build_and_push
    steps:
      #- name: Set variables
      #  run: |
      #      TAG="$( echo "${GITHUB_REF}" | cut -d'/' -f3 )"
      #      if grep -qs -e '^.*.*-develop' <<< "${TAG}" ; then
      #        echo "Found environment: DEVELOP - ${TAG}"
      #        echo "MANIFESTS_ENVIRONMENT=develop" | tee "${GITHUB_ENV}"
      #        export "MANIFESTS_ENVIRONMENT=develop"
      #      elif grep -qs -e '^.*.*-staging' <<< "${TAG}" ; then
      #        echo "Found environment: STAGING - ${TAG}"
      #        echo "MANIFESTS_ENVIRONMENT=staging" | tee -a "${GITHUB_ENV}"
      #        export "MANIFESTS_ENVIRONMENT=staging"
      #      elif grep -qs -e '^.*.*' <<< "${TAG}" ; then
      #        echo "No environment found, assuming: PRODUCTION - ${TAG}"
      #        echo "MANIFESTS_ENVIRONMENT=production" | tee -a "${GITHUB_ENV}"
      #        export "MANIFESTS_ENVIRONMENT=production"
      #      else
      #        echo 'Not a valid tag. Skipping...'
      #        exit 1
      #      fi
      #      echo "TAG=$TAG" | tee -a "${GITHUB_ENV}"
      #      VERSION="${TAG}"
      #      echo "VERSION=${VERSION}" | tee -a "${GITHUB_ENV}"
      #      echo "COMMIT_SHA=$GITHUB_SHA" | tee -a "${GITHUB_ENV}"
      #      echo "IMAGE_TAG=${{ secrets.ECR }}/chats:webapp-${TAG}" | tee -a "${GITHUB_ENV}"
      #      echo "OLD_IMAGE=${{ secrets.ECR }}/chats:webapp-${MANIFESTS_ENVIRONMENT}" | tee -a "${GITHUB_ENV}"
      #      echo "IMAGE_SOURCE_URL=https://github.com/weni-ai/chats-webapp" | tee -a "${GITHUB_ENV}"
      #      echo "MANIFESTS_REPOSITORY=weni-ai/kubernetes-manifests-chats" | tee -a "${GITHUB_ENV}"
      #      echo "MANIFESTS_APPLICATION=chats-webapp" | tee -a "${GITHUB_ENV}"
      #      echo "MANIFESTS_PATCH_TARGET=deployment.json" | tee -a "${GITHUB_ENV}"
      #      platform=${{ matrix.platform }}
      #      echo "PLATFORM_PAIR=${platform//\//-}" | tee -a "${GITHUB_ENV}"

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ secrets.REGISTRY_ECR }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: type=ref,event=tag
          flavor: |
            latest=${{ inputs.image_latest }}
            prefix=${{ inputs.image_tag_prefix }},onlatest=${{ inputs.image_tag_prefix_onlatest }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

#      - name: Create manifest list and push
#        working-directory: ${{ runner.temp }}/digests
#        run: |
#          docker buildx imagetools create -t "${{ env.IMAGE_TAG }}" \
#            $(printf '${{ env.DOCKER_IMAGE }}@sha256:%s ' *)

  deploy_manifest:
    env:
      MANIFESTS_APPLICATION: ${{ inputs.target_application }}
      MANIFESTS_REPOSITORY: ${{ inputs.target_repository }}
      MANIFESTS_PATCH_TARGET: ${{ inputs.target_patch_file }}
      MANIFESTS_REPOSITORY_BRANCH: ${{ inputs.target_repository_branch }}
    needs: merge
    #runs-on: ubuntu-22.04
    runs-on: ubuntu-latest
    steps:
      - name: Check out Kubernetes Manifests
        uses: actions/checkout@v3
        with:
          ref: ${{ env.MANIFESTS_REPOSITORY_BRANCH }}
          repository: ${{ env.MANIFESTS_REPOSITORY }}
          token: ${{ secrets.DEVOPS_GITHUB_PERMANENT_TOKEN }}
          path: ./kubernetes-manifests/

      - name: Update image on deployment
        working-directory: kubernetes-manifests/${{ env.MANIFESTS_APPLICATION }}
        env:
          IMAGE_TAG: ${{ env.DOCKER_IMAGE }}:${{ inputs.image_tag_prefix }}${{ needs.build_and_push.outputs.version }}
        run: |
          which jq > /dev/null 2>&1 || ( sudo apt update; sudo apt install -y jq )

          extver() {
            echo "$1" | sed s'/^.*[v:-]\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/'g | head -n1
          }

          verlte() {
            [ "$1" = "$(echo -e "$1\n$2" | sort -V | head -n1)" ]
          }

          MANIFESTS_ENV_TARGET=$(echo ${{ needs.build_and_push.outputs.version }} | grep -Eo 'staging|develop' || echo 'production')

          echo "Target environment: ${MANIFESTS_ENV_TARGET}"

          if [ ! -d "${MANIFESTS_ENV_TARGET}" ] || [ ! -r "${MANIFESTS_ENV_TARGET}/kustomization.yaml" ] || [ ! -r "${MANIFESTS_ENV_TARGET}/${{ env.MANIFESTS_PATCH_TARGET }}" ]; then
            echo "${MANIFESTS_ENV_TARGET}, ${MANIFESTS_ENV_TARGET}/kustomization.yaml, or ${MANIFESTS_ENV_TARGET}/${{ env.MANIFESTS_PATCH_TARGET }}: Not readable, or neither one of those exists"
            exit 1
          else
            CURRENT_IMAGE=$(cat "${MANIFESTS_ENV_TARGET}/${{ env.MANIFESTS_PATCH_TARGET }}" | jq -r '.[] | select(.path == "/spec/template/spec/containers/0/image") | .value')
            CURRENT_VERSION=$(extver "${CURRENT_IMAGE}")
            TARGET_VERSION=$(extver "${{ env.IMAGE_TAG }}")

            echo "Replacing the following image:"
            echo "  Image: ${CURRENT_IMAGE%%:*}"
            echo "  Current version: ${CURRENT_VERSION}"
            echo "  Target version: ${TARGET_VERSION}"

            if verlte "${CURRENT_VERSION}" "${TARGET_VERSION}"; then
              NEW_CONFIG=$(jq --arg imageTag "${{ env.IMAGE_TAG }}" '(.. | select(.path == "/spec/template/spec/containers/0/image")?) += {value: $imageTag }' "${MANIFESTS_ENV_TARGET}/${{ env.MANIFESTS_PATCH_TARGET }}")
              echo "New configuration:"
              echo "${NEW_CONFIG}" | tee "${MANIFESTS_ENV_TARGET}/${{ env.MANIFESTS_PATCH_TARGET }}"
            else
              echo "Version in file is greater than build, skipping update yaml"
            fi
          fi

      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.DEVOPS_GITHUB_PERMANENT_TOKEN }}
          repository: ${{ env.MANIFESTS_REPOSITORY }}
          directory: ./kubernetes-manifests/
          branch: ${{ env.MANIFESTS_REPOSITORY_BRANCH }}
          message: "From ${{ github.workflow }}"
